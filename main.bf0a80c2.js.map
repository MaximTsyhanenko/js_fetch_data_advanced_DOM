{"version":3,"sources":["scripts/main.js"],"names":["BASEurl","request","phoneId","fetch","then","response","ok","json","Promise","reject","Error","catch","createPhonesList","listClass","header","div","document","createElement","classList","add","insertAdjacentHTML","body","append","getFirstReceivedDetails","IdList","phones","map","race","result","getElementsByClassName","id","toUpperCase","name","getAllSuccessfulDetails","allSettled","phonesArray","filter","phone","status","value","getThreeFastestDetails","fastestResponse","data","i","style","color","position","bottom","left","fontSize","getInfoAboutPhones","url","phonesId"],"mappings":"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","file":"main.bf0a80c2.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n/* eslint-disable-next-line */\nconst BASEurl = 'https://mate-academy.github.io/phone-catalogue-static/api/phones';\n\nfunction request(phoneId) {\n  return fetch(BASEurl + '/' + phoneId + '.json')\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(new Error('promise rejected'));\n      }\n\n      return response.json();\n    })\n    .catch('Function \"request\" done with error');\n}\n\nfunction createPhonesList(listClass, header) {\n  const div = document.createElement('div');\n\n  div.classList.add(listClass);\n\n  div.insertAdjacentHTML('beforeend', `\n    <h1>${header}</h1>\n  `);\n\n  document.body.append(div);\n}\n\nfunction getFirstReceivedDetails(IdList) {\n  const phones = IdList.map(phoneId => request(phoneId));\n\n  return Promise.race(phones)\n    .then(result => {\n      createPhonesList('first-received', 'First Received');\n\n      const div = document.getElementsByClassName('first-received')[0];\n\n      div.insertAdjacentHTML('beforeend', `\n        <p><strong>ID:</strong> ${result.id.toUpperCase()}</p>\n        <p><strong>Name:</strong> ${result.name}</p>\n      `);\n    })\n    .catch(() => {\n      document.body.insertAdjacentHTML('beforeend', `\n        <div>getFirstReceivedDetails rejected!</div>\n      `);\n    });\n}\n\nfunction getAllSuccessfulDetails(IdList) {\n  const phones = IdList.map(phoneId => request(phoneId));\n\n  return Promise.allSettled(phones)\n    .then(phonesArray => phonesArray\n      .filter(phone => phone.status !== 'rejected'))\n    .then(result => {\n      createPhonesList('all-successful', 'All Successful');\n\n      const div = document.getElementsByClassName('all-successful')[0];\n\n      for (const phone of result) {\n        div.insertAdjacentHTML('beforeend', `\n          <p><strong>ID:</strong> ${phone.value.id.toUpperCase()}</p>\n          <p><strong>Name:</strong> ${phone.value.name}</p>\n          <p>____________</p>\n        `);\n      }\n    })\n    .catch(() => {\n      document.body.insertAdjacentHTML('beforeend', `\n        <div>getAllSuccessfulDetails rejected!</div>\n      `);\n    });\n}\n\nfunction getThreeFastestDetails(IdList) {\n  const phones = IdList.map(phoneId => request(phoneId));\n\n  createPhonesList('fastest', 'Fastest Responses');\n\n  const fastestResponse = (data) => {\n    return Promise.race(data)\n      .then(result => {\n        const div = document.getElementsByClassName('fastest')[0];\n\n        div.style.color = 'green';\n        div.style.position = 'absolute';\n        div.style.bottom = '10px';\n        div.style.left = '55px';\n        div.style.fontSize = '13px';\n\n        div.insertAdjacentHTML('beforeend', `\n          <p><strong>ID:</strong> ${result.id.toUpperCase()}</p>\n          <p><strong>Name:</strong> ${result.name}</p>\n          <p>____________</p>\n        `);\n      })\n      .catch(() => {\n        document.body.insertAdjacentHTML('beforeend', `\n          <div>getFirstReceivedDetails rejected!</div>\n        `);\n      });\n  };\n\n  for (let i = 0; i < 3; i++) {\n    fastestResponse(phones);\n  }\n}\n\nfunction getInfoAboutPhones(url) {\n  return fetch(url)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(new Error('promise rejected'));\n      }\n\n      return response.json();\n    })\n    .then(result => {\n      return result.map(phone => phone.id);\n    })\n    .then(phonesId => {\n      getFirstReceivedDetails(phonesId);\n      getAllSuccessfulDetails(phonesId);\n      getThreeFastestDetails(phonesId);\n    })\n    .catch('Function \"getPhonesId\" done with error');\n}\n\ngetInfoAboutPhones(BASEurl + '.json');\n"]}